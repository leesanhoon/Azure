# Azure Deployment Script for Enterprise Auth API
# PowerShell script ƒë·ªÉ tri·ªÉn khai ·ª©ng d·ª•ng l√™n Azure

param(
    [Parameter(Mandatory=$true)]
    [string]$ResourceGroupName,
    
    [Parameter(Mandatory=$true)]
    [string]$WebAppName,
    
    [Parameter(Mandatory=$true)]
    [string]$SqlServerName,
    
    [Parameter(Mandatory=$true)]
    [string]$SqlDatabaseName,
    
    [Parameter(Mandatory=$true)]
    [string]$SqlAdminUsername,
    
    [Parameter(Mandatory=$true)]
    [SecureString]$SqlAdminPassword,
    
    [Parameter(Mandatory=$false)]
    [string]$Location = "Southeast Asia",
    
    [Parameter(Mandatory=$false)]
    [string]$AppServicePlanName = "plan-enterprise-auth",
    
    [Parameter(Mandatory=$false)]
    [string]$Sku = "B1"
)

# Convert SecureString to plain text for connection string
$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($SqlAdminPassword)
$PlainPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)

Write-Host "üöÄ B·∫Øt ƒë·∫ßu tri·ªÉn khai Enterprise Auth API l√™n Azure" -ForegroundColor Green

# 1. ƒêƒÉng nh·∫≠p Azure (n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p)
Write-Host "1Ô∏è‚É£ Ki·ªÉm tra ƒëƒÉng nh·∫≠p Azure..." -ForegroundColor Yellow
$context = Get-AzContext
if (-not $context) {
    Write-Host "Vui l√≤ng ƒëƒÉng nh·∫≠p v√†o Azure..." -ForegroundColor Red
    Connect-AzAccount
}

# 2. T·∫°o Resource Group
Write-Host "2Ô∏è‚É£ T·∫°o Resource Group: $ResourceGroupName" -ForegroundColor Yellow
$resourceGroup = Get-AzResourceGroup -Name $ResourceGroupName -ErrorAction SilentlyContinue
if (-not $resourceGroup) {
    New-AzResourceGroup -Name $ResourceGroupName -Location $Location
    Write-Host "‚úÖ Resource Group ƒë√£ ƒë∆∞·ª£c t·∫°o" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Resource Group ƒë√£ t·ªìn t·∫°i" -ForegroundColor Green
}

# 3. T·∫°o SQL Server
Write-Host "3Ô∏è‚É£ T·∫°o SQL Server: $SqlServerName" -ForegroundColor Yellow
$sqlServer = Get-AzSqlServer -ResourceGroupName $ResourceGroupName -ServerName $SqlServerName -ErrorAction SilentlyContinue
if (-not $sqlServer) {
    $credentials = New-Object System.Management.Automation.PSCredential ($SqlAdminUsername, $SqlAdminPassword)
    New-AzSqlServer -ResourceGroupName $ResourceGroupName -ServerName $SqlServerName -Location $Location -SqlAdministratorCredentials $credentials
    Write-Host "‚úÖ SQL Server ƒë√£ ƒë∆∞·ª£c t·∫°o" -ForegroundColor Green
} else {
    Write-Host "‚úÖ SQL Server ƒë√£ t·ªìn t·∫°i" -ForegroundColor Green
}

# 4. C·∫•u h√¨nh Firewall cho SQL Server
Write-Host "4Ô∏è‚É£ C·∫•u h√¨nh Firewall cho SQL Server..." -ForegroundColor Yellow
# Allow Azure services
New-AzSqlServerFirewallRule -ResourceGroupName $ResourceGroupName -ServerName $SqlServerName -FirewallRuleName "AllowAzureServices" -StartIpAddress "0.0.0.0" -EndIpAddress "0.0.0.0" -ErrorAction SilentlyContinue

# Get current public IP and add to firewall
$publicIp = (Invoke-WebRequest -Uri "https://api.ipify.org" -UseBasicParsing).Content.Trim()
New-AzSqlServerFirewallRule -ResourceGroupName $ResourceGroupName -ServerName $SqlServerName -FirewallRuleName "ClientIP" -StartIpAddress $publicIp -EndIpAddress $publicIp -ErrorAction SilentlyContinue
Write-Host "‚úÖ Firewall rules ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh" -ForegroundColor Green

# 5. T·∫°o SQL Database
Write-Host "5Ô∏è‚É£ T·∫°o SQL Database: $SqlDatabaseName" -ForegroundColor Yellow
$sqlDatabase = Get-AzSqlDatabase -ResourceGroupName $ResourceGroupName -ServerName $SqlServerName -DatabaseName $SqlDatabaseName -ErrorAction SilentlyContinue
if (-not $sqlDatabase) {
    New-AzSqlDatabase -ResourceGroupName $ResourceGroupName -ServerName $SqlServerName -DatabaseName $SqlDatabaseName -Edition "Basic"
    Write-Host "‚úÖ SQL Database ƒë√£ ƒë∆∞·ª£c t·∫°o" -ForegroundColor Green
} else {
    Write-Host "‚úÖ SQL Database ƒë√£ t·ªìn t·∫°i" -ForegroundColor Green
}

# 6. T·∫°o App Service Plan
Write-Host "6Ô∏è‚É£ T·∫°o App Service Plan: $AppServicePlanName" -ForegroundColor Yellow
$appServicePlan = Get-AzAppServicePlan -ResourceGroupName $ResourceGroupName -Name $AppServicePlanName -ErrorAction SilentlyContinue
if (-not $appServicePlan) {
    New-AzAppServicePlan -ResourceGroupName $ResourceGroupName -Name $AppServicePlanName -Location $Location -Tier $Sku -Linux
    Write-Host "‚úÖ App Service Plan ƒë√£ ƒë∆∞·ª£c t·∫°o" -ForegroundColor Green
} else {
    Write-Host "‚úÖ App Service Plan ƒë√£ t·ªìn t·∫°i" -ForegroundColor Green
}

# 7. T·∫°o Web App
Write-Host "7Ô∏è‚É£ T·∫°o Web App: $WebAppName" -ForegroundColor Yellow
$webApp = Get-AzWebApp -ResourceGroupName $ResourceGroupName -Name $WebAppName -ErrorAction SilentlyContinue
if (-not $webApp) {
    New-AzWebApp -ResourceGroupName $ResourceGroupName -Name $WebAppName -AppServicePlan $AppServicePlanName -RuntimeStack "DOTNETCORE:9.0"
    Write-Host "‚úÖ Web App ƒë√£ ƒë∆∞·ª£c t·∫°o" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Web App ƒë√£ t·ªìn t·∫°i" -ForegroundColor Green
}

# 8. C·∫•u h√¨nh HTTPS Only
Write-Host "8Ô∏è‚É£ C·∫•u h√¨nh HTTPS Only..." -ForegroundColor Yellow
Set-AzWebApp -ResourceGroupName $ResourceGroupName -Name $WebAppName -HttpsOnly $true
Write-Host "‚úÖ HTTPS Only ƒë√£ ƒë∆∞·ª£c b·∫≠t" -ForegroundColor Green

# 9. C·∫•u h√¨nh Connection String
Write-Host "9Ô∏è‚É£ C·∫•u h√¨nh Connection String..." -ForegroundColor Yellow
$connectionString = "Server=tcp:$SqlServerName.database.windows.net,1433;Initial Catalog=$SqlDatabaseName;User ID=$SqlAdminUsername;Password=$PlainPassword;MultipleActiveResultSets=True;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"

$connectionStrings = @{
    "DefaultConnection" = @{
        "value" = $connectionString
        "type" = "SQLServer"
    }
}

Set-AzWebAppConnectionString -ResourceGroupName $ResourceGroupName -Name $WebAppName -ConnectionStrings $connectionStrings
Write-Host "‚úÖ Connection String ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh" -ForegroundColor Green

# 10. C·∫•u h√¨nh Application Settings
Write-Host "üîü C·∫•u h√¨nh Application Settings..." -ForegroundColor Yellow

# Generate secure JWT secret
$jwtSecret = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes([System.Guid]::NewGuid().ToString() + [System.Guid]::NewGuid().ToString()))

$appSettings = @{
    "ASPNETCORE_ENVIRONMENT" = "Production"
    "JwtSettings__Secret" = $jwtSecret
    "JwtSettings__Issuer" = "https://$WebAppName.azurewebsites.net"
    "JwtSettings__Audience" = "https://$WebAppName.azurewebsites.net"
    "JwtSettings__AccessTokenExpirationMinutes" = "15"
    "JwtSettings__RefreshTokenExpirationDays" = "7"
    "JwtSettings__ValidateIssuer" = "true"
    "JwtSettings__ValidateAudience" = "true"
    "JwtSettings__ValidateLifetime" = "true"
    "JwtSettings__ValidateIssuerSigningKey" = "true"
    "JwtSettings__ClockSkewMinutes" = "5"
}

Set-AzWebAppSetting -ResourceGroupName $ResourceGroupName -Name $WebAppName -AppSettings $appSettings
Write-Host "‚úÖ Application Settings ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh" -ForegroundColor Green

# 11. Enable Managed Identity
Write-Host "1Ô∏è‚É£1Ô∏è‚É£ B·∫≠t Managed Identity..." -ForegroundColor Yellow
Set-AzWebApp -ResourceGroupName $ResourceGroupName -Name $WebAppName -AssignIdentity $true
Write-Host "‚úÖ Managed Identity ƒë√£ ƒë∆∞·ª£c b·∫≠t" -ForegroundColor Green

# 12. Build v√† Publish ·ª©ng d·ª•ng
Write-Host "1Ô∏è‚É£2Ô∏è‚É£ Build v√† Publish ·ª©ng d·ª•ng..." -ForegroundColor Yellow
$projectPath = Join-Path $PSScriptRoot "../src/EnterpriseAuth.API/EnterpriseAuth.API.csproj"
$publishPath = Join-Path $PSScriptRoot "../publish"

# Restore dependencies
dotnet restore $projectPath
if ($LASTEXITCODE -ne 0) {
    Write-Error "‚ùå L·ªói khi restore dependencies"
    exit 1
}

# Build project
dotnet build $projectPath --configuration Release --no-restore
if ($LASTEXITCODE -ne 0) {
    Write-Error "‚ùå L·ªói khi build project"
    exit 1
}

# Publish project
dotnet publish $projectPath --configuration Release --output $publishPath --no-build
if ($LASTEXITCODE -ne 0) {
    Write-Error "‚ùå L·ªói khi publish project"
    exit 1
}

Write-Host "‚úÖ Build v√† Publish ho√†n th√†nh" -ForegroundColor Green

# 13. Deploy to Azure Web App
Write-Host "1Ô∏è‚É£3Ô∏è‚É£ Deploy l√™n Azure Web App..." -ForegroundColor Yellow

# Compress published files
$zipPath = Join-Path $PSScriptRoot "../deploy.zip"
if (Test-Path $zipPath) {
    Remove-Item $zipPath -Force
}

Compress-Archive -Path "$publishPath/*" -DestinationPath $zipPath -Force

# Deploy using Kudu API
$webApp = Get-AzWebApp -ResourceGroupName $ResourceGroupName -Name $WebAppName
$publishProfile = [xml](Get-AzWebAppPublishingProfile -ResourceGroupName $ResourceGroupName -Name $WebAppName -OutputFile $null)
$username = $publishProfile.publishData.publishProfile[0].userName
$password = $publishProfile.publishData.publishProfile[0].userPWD

# Deploy via Kudu ZIP API
$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $username, $password)))
$kuduUrl = "https://$WebAppName.scm.azurewebsites.net/api/zipdeploy"

try {
    $headers = @{
        Authorization = "Basic $base64AuthInfo"
        "Content-Type" = "application/zip"
    }
    
    Invoke-RestMethod -Uri $kuduUrl -Method POST -InFile $zipPath -Headers $headers -TimeoutSec 600
    Write-Host "‚úÖ Deploy th√†nh c√¥ng!" -ForegroundColor Green
} catch {
    Write-Error "‚ùå L·ªói khi deploy: $($_.Exception.Message)"
    exit 1
}

# 14. Run Database Migration
Write-Host "1Ô∏è‚É£4Ô∏è‚É£ Ch·∫°y Database Migration..." -ForegroundColor Yellow
try {
    # Restart web app to ensure new deployment is loaded
    Restart-AzWebApp -ResourceGroupName $ResourceGroupName -Name $WebAppName
    Start-Sleep -Seconds 30
    
    # Health check
    $healthUrl = "https://$WebAppName.azurewebsites.net/health"
    $response = Invoke-WebRequest -Uri $healthUrl -UseBasicParsing -TimeoutSec 60
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Health check passed - Migration ho√†n th√†nh" -ForegroundColor Green
    } else {
        Write-Warning "‚ö†Ô∏è Health check failed - Vui l√≤ng ki·ªÉm tra logs"
    }
} catch {
    Write-Warning "‚ö†Ô∏è Kh√¥ng th·ªÉ verify migration: $($_.Exception.Message)"
}

# 15. Cleanup
Write-Host "1Ô∏è‚É£5Ô∏è‚É£ D·ªçn d·∫πp files t·∫°m..." -ForegroundColor Yellow
Remove-Item $publishPath -Recurse -Force -ErrorAction SilentlyContinue
Remove-Item $zipPath -Force -ErrorAction SilentlyContinue
Write-Host "‚úÖ Cleanup ho√†n th√†nh" -ForegroundColor Green

# Summary
Write-Host "`nüéâ TRI·ªÇN KHAI HO√ÄN TH√ÄNH!" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green
Write-Host "üîó Web App URL: https://$WebAppName.azurewebsites.net" -ForegroundColor Cyan
Write-Host "üìä Swagger UI: https://$WebAppName.azurewebsites.net/swagger" -ForegroundColor Cyan
Write-Host "üíæ SQL Server: $SqlServerName.database.windows.net" -ForegroundColor Cyan
Write-Host "üóÑÔ∏è Database: $SqlDatabaseName" -ForegroundColor Cyan
Write-Host "üîë JWT Secret: $jwtSecret" -ForegroundColor Yellow
Write-Host "=====================================" -ForegroundColor Green
Write-Host "`nüìù L∆∞u √Ω quan tr·ªçng:" -ForegroundColor Yellow
Write-Host "1. L∆∞u JWT Secret ·ªü n∆°i an to√†n" -ForegroundColor White
Write-Host "2. C·∫•u h√¨nh custom domain n·∫øu c·∫ßn" -ForegroundColor White
Write-Host "3. Thi·∫øt l·∫≠p monitoring v√† alerts" -ForegroundColor White
Write-Host "4. Backup database ƒë·ªãnh k·ª≥" -ForegroundColor White

# Clear sensitive variables
$PlainPassword = $null
$jwtSecret = $null
[System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($BSTR)